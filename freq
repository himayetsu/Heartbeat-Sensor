/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;

/* Variables for tracking button presses and frequency */
volatile uint32_t last_tick = 0;
volatile uint32_t current_tick = 0;
volatile float frequency = 0.0;

/* Array to store the last 20 frequencies */
#define ARRAY_SIZE 20
float frequency_array[ARRAY_SIZE] = {0};
uint8_t frequency_index = 0;
uint8_t update_count = 0;

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
void filter_outliers_and_average(float *array, uint8_t size, float *average);

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
    /* Initialize the HAL Library */
    HAL_Init();

    /* Configure the system clock */
    SystemClock_Config();

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
    MX_TIM2_Init();

    /* Start TIM2 */
    HAL_TIM_Base_Start(&htim2);

    /* Infinite loop */
    while (1)
    {
        // Calculate the average frequency after every 10 updates
        if (update_count >= 10)
        {
            float average_frequency = 0.0f;
            filter_outliers_and_average(frequency_array, ARRAY_SIZE, &average_frequency);

            // Light up LD2 (PA5) if the average frequency is > threshold
            if (average_frequency > 5.0f) // Adjust this threshold as needed
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // Turn on LD2
            }
            else
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Turn off LD2
            }

            // Reset update counter
            update_count = 0;
        }

        HAL_Delay(500); // Update LED state every 500 ms
    }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
    htim2.Instance = TIM2;
    htim2.Init.Prescaler = 89; // Prescaler for 1 MHz timer clock
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim2.Init.Period = 0xFFFFFFFF; // Max value for 32-bit counter
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
    {
        Error_Handler();
    }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    /* Enable GPIO Clocks */
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOC_CLK_ENABLE();

    /* Configure GPIO pin : PC13 (Button) */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; // Interrupt on rising edge
    GPIO_InitStruct.Pull = GPIO_PULLUP;         // Pull-up for stability
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* Configure GPIO pin : PA5 (LED) */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Enable EXTI interrupt for PC13 */
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

/**
  * @brief EXTI Line 15-10 IRQ Handler
  * This function handles EXTI Line 15 to 10 interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13); // Forward interrupt to HAL handler
}

/**
  * @brief External Interrupt Callback
  * @param GPIO_Pin: Specifies the pins connected to EXTI line
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    if (GPIO_Pin == GPIO_PIN_13)
    {
        uint32_t interval_ticks = 0; // Declare interval_ticks here

        current_tick = __HAL_TIM_GET_COUNTER(&htim2); // Get current timer value

        if (last_tick != 0)
        {
            // Handle timer overflow
            if (current_tick >= last_tick)
            {
                interval_ticks = current_tick - last_tick;
            }
            else
            {
                interval_ticks = (0xFFFFFFFF - last_tick) + current_tick + 1;
            }

            // Calculate frequency in Hz
            if (interval_ticks > 0)
            {
                frequency = 1000000.0f / interval_ticks; // Frequency = 1 MHz / interval

                // Update the frequency array
                frequency_array[frequency_index] = frequency;
                frequency_index = (frequency_index + 1) % ARRAY_SIZE;

                // Increment update counter
                update_count++;
            }
        }

        last_tick = current_tick; // Update last tick
    }
}

/**
  * @brief Filter outliers and calculate the average frequency
  * @param array: Pointer to the frequency array
  * @param size: Size of the frequency array
  * @param average: Pointer to store the calculated average
  */
void filter_outliers_and_average(float *array, uint8_t size, float *average)
{
    // Copy the array to a temporary buffer for sorting
    float temp_array[ARRAY_SIZE];
    memcpy(temp_array, array, sizeof(float) * size);

    // Sort the array
    for (uint8_t i = 0; i < size - 1; i++)
    {
        for (uint8_t j = 0; j < size - i - 1; j++)
        {
            if (temp_array[j] > temp_array[j + 1])
            {
                float temp = temp_array[j];
                temp_array[j] = temp_array[j + 1];
                temp_array[j + 1] = temp;
            }
        }
    }

    // Calculate Q1 (25th percentile) and Q3 (75th percentile)
    float Q1 = temp_array[size / 4];
    float Q3 = temp_array[3 * size / 4];
    float IQR = Q3 - Q1; // Interquartile range

    // Determine bounds for non-outliers
    float lower_bound = Q1 - 1.5 * IQR;
    float upper_bound = Q3 + 1.5 * IQR;

    // Calculate the average of values within bounds
    float sum = 0.0f;
    uint8_t valid_count = 0;
    for (uint8_t i = 0; i < size; i++)
    {
        if (array[i] >= lower_bound && array[i] <= upper_bound)
        {
            sum += array[i];
            valid_count++;
        }
    }

    // Calculate the average of valid values
    float valid_average = 0.0f;
    if (valid_count > 0)
    {
        valid_average = sum / valid_count;
    }
    else
    {
        valid_average = 0.0f; // No valid values
    }

    // Replace outliers with the valid average
    for (uint8_t i = 0; i < size; i++)
    {
        if (array[i] < lower_bound || array[i] > upper_bound)
        {
            array[i] = valid_average;
        }
    }

    // Set the final average to the caller
    *average = valid_average;

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    /* Configure the main internal regulator output voltage */
    __HAL_RCC_PWR_CLK_ENABLE();
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

    /* Initializes the RCC Oscillators */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 16;
    RCC_OscInitStruct.PLL.PLLN = 336;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4; // Correct setting for PLLP
    RCC_OscInitStruct.PLL.PLLQ = 7;            // USB clock divisor

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        Error_Handler();
    }

    /* Initializes the CPU, AHB, and APB buses clocks */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4; // Set APB1 prescaler to 4
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
    {
        Error_Handler();
    }
}


/**
  * @brief Error Handler
  */
void Error_Handler(void)
{
    while (1)
    {
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Blink LD2 for debugging
        HAL_Delay(100); // 100 ms delay
    }
}
